import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from './index.module.scss'
import PopUp from '../../components/ChatWidget/PopUp'
import Message from '../../components/ChatWidget/Modules/Message'
import { useRef, useState,useEffect, useCallback } from 'react'
import socketIOClient from "socket.io-client";
import {
    initiateSocketConnection,
    disconnectSocket,
    sendMessage,
    subscribeToMessages,
    joinRoom,
    onNewUsers
} from "../../utils/socket.io.utils";

const ENDPOINT = "http://localhost:8088";
const CHAT_ROOM = 'myRandomChatRoomId';
const SENDER = {
    id: '123',
    name: "Yellow Green"
};
const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.5081GRZV_wgl4DNZFCCgzpsTMorOZWWr9RQaeOS_f_0"

export default function Home() {

    const messageRef = useRef()
    const containerRef = useRef()

    const [opened,close] = useState(false)
    const [room,setRoom] = useState(null)
    const [user,setUser] = useState(SENDER)
    const [messages,setMessage] = useState([])
    const [rooms,setRooms] = useState([
    ])

    useEffect(()=>{  
        scrollToMyRef()
    },[messages,opened])

    useEffect(()=>{
        initiateSocketConnection(token);
        onNewUsers((err, data) => {
            setRooms(prev => (data?.user?.id !== user?.id ) ? [  ...new Map([...prev, data].map((item) => [item["name"], item])).values(), ]: prev);
        }); 
    },[])



    // useEffect(() => {
    //     if (room) {
    //         setMessage([])
    //         joinRoom(room,(err, data) => {
    //             setMessage(prev => [...prev, data]);
    //         });
           
    //         return () => {
    //             disconnectSocket();
    //         }
    //     }
    // }, [room]);

    // useEffect(() => {
    //     if(chatId){
    //         const socket = socketIOClient(ENDPOINT);
    //         socket.on("init", data => {
    //           setMessage(prvChat=>[...prvChat,data]);
    //         });
    //     }
    // }, [chatId]);

    console.log("Data",rooms)

    const  scrollToMyRef = () => {
        if(containerRef.current){
            const scroll =
              containerRef.current.scrollHeight -
              containerRef.current.clientHeight;
            containerRef.current.scrollTo(0, scroll);
        }
    };

    const send = () =>{
        if(messageRef?.current?.value !== null){
          
            const message = messageRef?.current?.textContent;
            sendMessage({message, roomName: room?.name}, cb => {
                // callback is acknowledgement from server
                setMessage(prev => [...prev, {
                    message,
                    sender : {
                        ...user
                    }
                }]);
                // clear the input after the message is sent
                messageRef.current.textContent  = '';
            });
            return
        }
        return
    }

    const handleSendOnClick = () =>{
        if(messageRef?.current?.value){
            send()
            return
        }
        return
    }

    const handleSendOnKeyPress = (event) =>{
        if(event.key === 'Enter'){
            event.preventDefault()

            if(event.ctrlKey){   
                const message = messageRef.current.innerHTML
                messageRef.current.innerHTML = message + "</br>"       
                return true
            }else {
                send()
                messageRef.current.innerHTML = ''       
                return true
            }
        }
        return true
    }
 
    const handleChangeRoom = useCallback((room)=>{
        setMessage([])
        joinRoom({name:room?.name,user:SENDER},(err, data) => {
            setMessage(prev => [...prev, data]);
        });
        setRoom(room)
        subscribeToMessages((err, data) => {
            console.log(data);
            setMessage(prev => [...prev, data]);
          });
        return () => {
            disconnectSocket();
        }
    },[room])



    return (
        <>
        <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
                <div className={styles.left}>
                    <div className={styles.leftTop}>
                        <Image
                            src={"/icons/default_avatar.jpg"}
                            width={40}
                            height={40}
                            alt="avatar"

                        />
                        <h3>Messenger</h3>
                        <div style={{
                            width:"50px",
                            height: "50px"
                        }}>

                        </div>
                    </div>
                    <input type={"search"} placeholder="Search"/>
                    <div className={styles.rooms}>
                        {rooms && rooms.map((r,i)=>{
                            return(
                                <div key={i} className={styles.room} onClick={(e)=>{handleChangeRoom(r)}}>
                                    {r?.user?.name}
                                </div>
                            )
                        })}
                    </div>
                </div>
                <div className={styles.right}>
                    {room ? (
                    <>
                        <div className={styles.pop_up_top}>
                            <div className={styles.top_left}>
                                <Image
                                    src={"/icons/default_avatar.jpg"}
                                    width={40}
                                    height={40}
                                    alt="avatar"
                                />
                                <div className={styles.user_info}>
                                    <div className={styles.user_name}>{room?.user?.name}</div>
                                    <div className={styles.user_status}>
                                        <div></div>
                                        <div>En ligne</div>
                                    </div>
                                </div>
                            </div>
                            <div className={styles.pop_up_close} onClick={(e)=>{close(false)}}>
                                <svg width="24px" height="24px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M18 6L6 18" stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                    <path d="M6 6L18 18" stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                </svg>
                            </div>
                        </div>
                        <div className={styles.pop_up_content}>
                            <div ref={containerRef} className={styles.pop_up_content_messages}>
                                <Message welcome={true}/>
                                {messages && messages?.map((m,i)=>{
                                    return(
                                        <Message key={i} message={m} active={m?.sender?.id === user?.id}/>
                                    )
                                })}
                            </div>
                        </div>
                        <div className={styles.pop_up_bottom}>
                            <span contentEditable={true} onKeyDown={(e)=>{handleSendOnKeyPress(e)}}   placeholder={"Message"} ref={messageRef}  className={styles.textArea} >

                            </span>
                            <svg  onClick={(e)=>{handleSendOnClick()}} width="24px" height="24px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="none"><path fill="#000000" fillRule="evenodd" d="M2.345 2.245a1 1 0 0 1 1.102-.14l18 9a1 1 0 0 1 0 1.79l-18 9a1 1 0 0 1-1.396-1.211L4.613 13H10a1 1 0 1 0 0-2H4.613L2.05 3.316a1 1 0 0 1 .294-1.071z" clipRule="evenodd"/></svg>
                        </div>
                    </>
                    ):(
                        <></>
                    )}
                </div>
            </main>
        </>
    )
}
